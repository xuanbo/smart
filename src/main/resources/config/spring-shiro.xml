<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xsi:schemaLocation="http://www.springframework.org/schema/beans
        http://www.springframework.org/schema/beans/spring-beans-4.3.xsd">

    <!-- 凭证匹配器 -->
    <bean id="credentialsMatcher" class="com.whut.smart.support.shiro.RetryLimitHashedCredentialsMatcher">
        <constructor-arg ref="cacheManager" />
        <property name="hashAlgorithmName" value="md5" />
        <property name="hashIterations" value="3" />
        <property name="storedCredentialsHexEncoded" value="true" />
    </bean>

    <!-- 配置进行授权和认证的Realm -->
    <bean id="myRealm" class="com.whut.smart.support.shiro.DefaultRealm">
        <property name="credentialsMatcher" ref="credentialsMatcher" />
        <property name="cachingEnabled" value="true" />
        <property name="authenticationCachingEnabled" value="true" />
        <property name="authenticationCacheName" value="authenticationCache" />
        <property name="authorizationCachingEnabled" value="true" />
        <property name="authorizationCacheName" value="authorizationCache" />
    </bean>

    <!-- 配置缓存管理器 采用EhCache -->
    <bean id="cacheManager" class="org.apache.shiro.cache.ehcache.EhCacheManager">
        <property name="cacheManager" ref="ehCacheManager" />
    </bean>

    <bean id="ehCacheManager" class ="org.springframework.cache.ehcache.EhCacheManagerFactoryBean">
        <property name="configLocation" value="classpath:config/shiro-ehcache.xml" />
        <property name="shared" value="true" />
    </bean>

    <bean id="securityManager" class="org.apache.shiro.web.mgt.DefaultWebSecurityManager">
        <property name="cacheManager" ref="cacheManager" />
        <property name="realm" ref="myRealm" />
    </bean>

    <!-- 配置 bean 后置处理器:  会自动的调用和Spring整合后各个组件的生命周期方法. -->
    <bean id="lifecycleBeanPostProcessor" class="org.apache.shiro.spring.LifecycleBeanPostProcessor"/>

    <!-- 自定义授权filter，不具备角色则返回json -->
    <bean id="defaultAuthorizationFilter" class="com.whut.smart.support.shiro.DefaultAuthorizationFilter" />
    <!-- 自定义授权filter，需要access_token才能访问，授权用户不具备角色则返回json -->
    <bean id="defaultAccessTokenAuthorizationFilter" class="com.whut.smart.support.shiro.DefaultAccessTokenAuthorizationFilter" />

    <!--配置shiroFilter bean: 该bean 的id必须和web.xml文件中配置的shiro filter 的 name 一致 -->
    <!--<bean id="shiroFilter" class="org.apache.shiro.spring.web.ShiroFilterFactoryBean">-->
    <!-- 使用自定义的ShiroFilterFactoryBean，从数据库中读取FilterChains -->
    <bean id="shiroFilter" class="com.whut.smart.support.shiro.DefaultShiroFilterFactoryBean">
        <!-- 装配 securityManager -->
        <property name="securityManager" ref="securityManager"/>
        <!-- 配置登录页面 -->
        <property name="loginUrl" value="/login"/>
        <!-- 登录成功后的页面 我使用了ajax登录认证，没什么卵用 -->
        <property name="successUrl" value="/index.html"/>
        <!-- 授权失败的页面 我自定义了授权filter，授权失败返回json，没什么卵用 -->
        <property name="unauthorizedUrl" value="/unauthorized.jsp"/>
        <!-- 自定义认证filter -->
        <property name="filters">
            <map>
                <entry key="needAnyRole" value-ref="defaultAuthorizationFilter" />
                <entry key="needAccessTokenAndAnyRole" value-ref="defaultAccessTokenAuthorizationFilter" />
            </map>
        </property>
        <!-- 数据库中用户过滤url的filter的别名，这里我使用的是DefaultAuthorizationFilter -->
        <property name="filterAlias" value="needAccessTokenAndAnyRole" />
        <!-- 具体配置需要拦截哪些URL,以及访问对应的 URL 时使用什么 Shiro Filter进行拦截. -->
        <property name="filterChainDefinitions">
            <value>
                /assets/** = anon
                /favicon.ico = anon
                / = anon
                /login* = anon
                <!-- 配置登出： 使用logout过滤器 -->
                /logout = logout
                <!--
                    /**
                    如果设置为authc，rememberMe还是需要重新登录，
                    如果设置为user，但是可能会造成session为空
                    如果重写FormAuthenticationFilter，一旦cookie被盗用，那么就会冒用信息
                    /** = user
                 -->
                <!--
                    已经在数据库中配置needAnyRole，这里就不用配置文件了
                    /** = needAnyRole['ROLE_USER', 'ROLE_ADMIN']
                -->
            </value>
        </property>
    </bean>

    <!-- shiro 注解 -->
    <bean class="org.springframework.aop.framework.autoproxy.DefaultAdvisorAutoProxyCreator"
          depends-on="lifecycleBeanPostProcessor" />
    <bean class="org.apache.shiro.spring.security.interceptor.AuthorizationAttributeSourceAdvisor">
        <property name="securityManager" ref="securityManager" />
    </bean>

</beans>